pipeline {
	agent { label 'master' }
	environment {
		AMK_Room_ID = credentials('AMK_Infrastructure_Hardening_Room_ID')
		Webex_Token= credentials('Webex_Token')
	}
	// parameters{
	// 	choice(name: 'ENV',  choices: ['','pre-prod','uat','production'], description: 'Pls choose Environment')
	// 	booleanParam(name: 'ubuntu', defaultValue: false, description: 'Select Ubuntu')
	// 	booleanParam(name: 'redhat', defaultValue: false, description: 'Select RedHat')
	// 	booleanParam(name: 'solaris', defaultValue: false, description: 'Select Solaris')
	// }
	stages {
		stage('Parameters'){
			steps {
				script {
					properties([
						parameters([
								[$class: 'ChoiceParameter', 
									choiceType: 'PT_SINGLE_SELECT', 
									description: 'Select the AppFile from the Dropdown List', 
									filterLength: 1, 
									filterable: false, 
									name: 'ENV', 
									script: [
											$class: 'GroovyScript', 
											fallbackScript: [
													classpath: [], 
													sandbox: false, 
													script: 
															"return['Could not get The ENV']"
											], 
											script: [
													classpath: [], 
													sandbox: false, 
													script: 
															"return['uat','pre-prod','production']"
											]
									]
								],
								booleanParam(name: 'ubuntu', defaultValue: false, description: 'Select Ubuntu'),
								[$class: 'CascadeChoiceParameter', 
										choiceType: 'PT_CHECKBOX', 
										description: 'Select the Server List from the Dropdown List',
										filterLength: 1,
										filterable: true, 
										name: 'Server_List_Ubuntu', 
										referencedParameters: 'ENV,ubuntu', 
										script:[
											$class: 'GroovyScript', 
											fallbackScript: [ 
												classpath: [], 
												sandbox: false, 
												script: "return['Could not get Server_List from AppFile Param']"
											],
											script: [ 
												classpath: [], 
												sandbox: false, 
												script: '''
													if (ENV.equals("uat")){
														def hosts = []
														def list = []
														if(ubuntu){
															def appName = "hardening-server"
															def accessToken = "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".bytes.encodeBase64().toString()
															def get = new URL("https://raw.githubusercontent.com/amkbank/ansible-infrastructure/main/ansible/inventory/uat/ubuntu/hardening-server-hosts").openConnection();
															get.setRequestProperty("authorization", "Basic " + accessToken)
															def content = get.getInputStream().getText()
															def startCollect = false
															for(def line : content.split("\\n")) {
																	if(line.contains("["+ appName +"]")){ // This is a starting point of host entries
																			startCollect = true
																			continue
																	} else if(startCollect) {
																			if(!line.allWhitespace && !line.contains("[")){
																					hosts.add(line.trim())
																			} else {
																					break
																			}
																	} 
															}
															for (int i = 0; i < hosts.size(); i++){
																list.add(hosts[i].split(" ")[0,1])
															}
															return list
														}
													}
													else if (ENV.equals("pre-prod")){
														def hosts = []
														def list = []
														if(ubuntu){
															def appName = "hardening-server"
															def accessToken = "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".bytes.encodeBase64().toString()
															def get = new URL("https://raw.githubusercontent.com/amkbank/ansible-infrastructure/main/ansible/inventory/pre-prod/ubuntu/hardening-server-hosts").openConnection();
															get.setRequestProperty("authorization", "Basic " + accessToken)
															def content = get.getInputStream().getText()
															def startCollect = false
															for(def line : content.split("\\n")) {
																	if(line.contains("["+ appName +"]")){ // This is a starting point of host entries
																			startCollect = true
																			continue
																	} else if(startCollect) {
																			if(!line.allWhitespace && !line.contains("[")){
																					hosts.add(line.trim())
																			} else {
																					break
																			}
																	} 
															}
															for (int i = 0; i < hosts.size(); i++){
																list.add(hosts[i].split(" ")[0,1])
															}
															return list
														}
													}
													else if (ENV.equals("production")){
														def hosts = []
														def list = []
														if(ubuntu){
															def appName = "hardening-server"
															def accessToken = "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".bytes.encodeBase64().toString()
															def get = new URL("https://raw.githubusercontent.com/amkbank/ansible-infrastructure/main/ansible/inventory/production/ubuntu/hardening-server-hosts").openConnection();
															get.setRequestProperty("authorization", "Basic " + accessToken)
															def content = get.getInputStream().getText()
															def startCollect = false
															for(def line : content.split("\\n")) {
																	if(line.contains("["+ appName +"]")){ // This is a starting point of host entries
																			startCollect = true
																			continue
																	} else if(startCollect) {
																			if(!line.allWhitespace && !line.contains("[")){
																					hosts.add(line.trim())
																			} else {
																					break
																			}
																	} 
															}
															for (int i = 0; i < hosts.size(); i++){
																list.add(hosts[i].split(" ")[0,1])
															}
															return list
														}
													}
												'''
											]
										]
								],
								booleanParam(name: 'redhat', defaultValue: false, description: 'Select RedHat'),
								[$class: 'CascadeChoiceParameter', 
										choiceType: 'PT_CHECKBOX', 
										description: 'Select the Server List from the Dropdown List',
										filterLength: 1,
										filterable: true, 
										name: 'Server_List_RedHat', 
										referencedParameters: 'ENV,redhat', 
										script:[
											$class: 'GroovyScript', 
											fallbackScript: [ 
												classpath: [], 
												sandbox: false, 
												script: "return['Could not get Server_List from AppFile Param']"
											],
											script: [ 
												classpath: [], 
												sandbox: false, 
												script: '''
													if (ENV.equals("uat")){
														def hosts = []
														def list = []
														if (redhat){
															def appName = "hardening-server"
															def accessToken = "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".bytes.encodeBase64().toString()
															def get = new URL("https://raw.githubusercontent.com/amkbank/ansible-infrastructure/main/ansible/inventory/uat/redhat/hardening-server-hosts").openConnection();
															get.setRequestProperty("authorization", "Basic " + accessToken)
															def content = get.getInputStream().getText()
															
															def startCollect = false
															for(def line : content.split("\\n")) {
																	if(line.contains("["+ appName +"]")){ // This is a starting point of host entries
																			startCollect = true
																			continue
																	} else if(startCollect) {
																			if(!line.allWhitespace && !line.contains("[")){
																					hosts.add(line.trim())
																			} else {
																					break
																			}
																	} 
															}
															for (int i = 0; i < hosts.size(); i++){
																list.add(hosts[i].split(" ")[0,1])
															}
															return list
														}
													}
													if (ENV.equals("pre-prod")){
														def hosts = []
														def list = []
														if (redhat){
															def appName = "hardening-server"
															def accessToken = "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".bytes.encodeBase64().toString()
															def get = new URL("https://raw.githubusercontent.com/amkbank/ansible-infrastructure/main/ansible/inventory/pre-prod/redhat/hardening-server-hosts").openConnection();
															get.setRequestProperty("authorization", "Basic " + accessToken)
															def content = get.getInputStream().getText()
															
															def startCollect = false
															for(def line : content.split("\\n")) {
																	if(line.contains("["+ appName +"]")){ // This is a starting point of host entries
																			startCollect = true
																			continue
																	} else if(startCollect) {
																			if(!line.allWhitespace && !line.contains("[")){
																					hosts.add(line.trim())
																			} else {
																					break
																			}
																	} 
															}
															for (int i = 0; i < hosts.size(); i++){
																list.add(hosts[i].split(" ")[0,1])
															}
															return list
														}
													}
													if (ENV.equals("production")){
														def hosts = []
														def list = []
														if (redhat){
															def appName = "hardening-server"
															def accessToken = "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".bytes.encodeBase64().toString()
															def get = new URL("https://raw.githubusercontent.com/amkbank/ansible-infrastructure/main/ansible/inventory/production/redhat/hardening-server-hosts").openConnection();
															get.setRequestProperty("authorization", "Basic " + accessToken)
															def content = get.getInputStream().getText()
															
															def startCollect = false
															for(def line : content.split("\\n")) {
																	if(line.contains("["+ appName +"]")){ // This is a starting point of host entries
																			startCollect = true
																			continue
																	} else if(startCollect) {
																			if(!line.allWhitespace && !line.contains("[")){
																					hosts.add(line.trim())
																			} else {
																					break
																			}
																	} 
															}
															for (int i = 0; i < hosts.size(); i++){
																list.add(hosts[i].split(" ")[0,1])
															}
															return list
														}
													}
												'''
											]
										]
								],
								booleanParam(name: 'solaris', defaultValue: false, description: 'Select Solaris'),
								[$class: 'CascadeChoiceParameter', 
										choiceType: 'PT_CHECKBOX', 
										description: 'Select the Server List from the Dropdown List',
										filterLength: 1,
										filterable: true, 
										name: 'Server_List_Solaris', 
										referencedParameters: 'ENV,solaris', 
										script:[
											$class: 'GroovyScript', 
											fallbackScript: [ 
												classpath: [], 
												sandbox: false, 
												script: "return['Could not get Server_List from AppFile Param']"
											],
											script: [ 
												classpath: [], 
												sandbox: false, 
												script: '''
													if (ENV.equals("uat")){
														def hosts = []
														def list = []
														if (solaris){
															def appName = "hardening-server"
															def accessToken = "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".bytes.encodeBase64().toString()
															def get = new URL("https://raw.githubusercontent.com/amkbank/ansible-infrastructure/main/ansible/inventory/uat/solaris/hardening-server-hosts").openConnection();
															get.setRequestProperty("authorization", "Basic " + accessToken)
															def content = get.getInputStream().getText()
															def startCollect = false
															for(def line : content.split("\\n")) {
																	if(line.contains("["+ appName +"]")){ // This is a starting point of host entries
																			startCollect = true
																			continue
																	} else if(startCollect) {
																			if(!line.allWhitespace && !line.contains("[")){
																					hosts.add(line.trim())
																			} else {
																					break
																			}
																	} 
															}
															for (int i = 0; i < hosts.size(); i++){
																list.add(hosts[i].split(" ")[0,1])
															}
															return list
														}
													}
													else if (ENV.equals("pre-prod")){
														def hosts = []
														def list = []
														if (solaris){
															def appName = "hardening-server"
															def accessToken = "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".bytes.encodeBase64().toString()
															def get = new URL("https://raw.githubusercontent.com/amkbank/ansible-infrastructure/main/ansible/inventory/pre-prod/solaris/hardening-server-hosts").openConnection();
															get.setRequestProperty("authorization", "Basic " + accessToken)
															def content = get.getInputStream().getText()
															def startCollect = false
															for(def line : content.split("\\n")) {
																	if(line.contains("["+ appName +"]")){ // This is a starting point of host entries
																			startCollect = true
																			continue
																	} else if(startCollect) {
																			if(!line.allWhitespace && !line.contains("[")){
																					hosts.add(line.trim())
																			} else {
																					break
																			}
																	} 
															}
															for (int i = 0; i < hosts.size(); i++){
																list.add(hosts[i].split(" ")[0,1])
															}
															return list
														}
													}
													else if (ENV.equals("production")){
														def hosts = []
														def list = []
														if (solaris){
															def appName = "hardening-server"
															def accessToken = "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".bytes.encodeBase64().toString()
															def get = new URL("https://raw.githubusercontent.com/amkbank/ansible-infrastructure/main/ansible/inventory/production/solaris/hardening-server-hosts").openConnection();
															get.setRequestProperty("authorization", "Basic " + accessToken)
															def content = get.getInputStream().getText()
															def startCollect = false
															for(def line : content.split("\\n")) {
																	if(line.contains("["+ appName +"]")){ // This is a starting point of host entries
																			startCollect = true
																			continue
																	} else if(startCollect) {
																			if(!line.allWhitespace && !line.contains("[")){
																					hosts.add(line.trim())
																			} else {
																					break
																			}
																	} 
															}
															for (int i = 0; i < hosts.size(); i++){
																list.add(hosts[i].split(" ")[0,1])
															}
															return list
														}
													}
												'''
											]
										]
								]
						])
					])
				}
			}
    }
		stage ('Configure Hardening') {
			parallel{
				stage ("Configure Hardening Ubuntu"){
					when {
						expression {
							return params.ubuntu == true;
						}
					}
					steps {
						script {
								def list = []
								def result_list = Server_List_Ubuntu.tokenize(",")
								for(int i = 0; i< result_list.size(); i++){
									if(i%2 == 0){
										list.add(result_list[i])
									}
								}
								def host = list.join(",")
								env.host = host
								sh """
									echo ${host}
								"""
								sh '''
										ansible-playbook ansible/hardening.yml \
																		 -i ansible/inventory/${ENV}/ubuntu/hardening-server-hosts \
																		 -l ${host} | tee -a  hardening-ubuntu-result-logs-${BUILD_NUMBER}.txt
										grep -A99 "PLAY RECAP" hardening-ubuntu-result-logs-${BUILD_NUMBER}.txt >> hardening-ubuntu-result-${BUILD_NUMBER}.txt
								'''
								sh """
                  curl -F 'roomId=${AMK_Room_ID}' -F 'files=@${WORKSPACE}/hardening-ubuntu-result-${BUILD_NUMBER}.txt' -F 'text=Result Report attached' -H 'Authorization: Bearer OTI0ZGQzYjItZWZmOC00MDFlLWI0NDItZDJjMjY1YzFiNWNhMWJiY2YwNDktOTA3_PF84_e9d367a2-7717-4865-b0b8-3f5b644c2265' --location 'https://webexapis.com/v1/messages'
                """
						}
					}
				}
				stage ("Configure Hardening Redhat"){
					when {
						expression {
							return params.redhat == true;
						}
					}
					steps {
						script {
								def list = []
								def result_list = Server_List_RedHat.tokenize(",")
								for(int i = 0; i< result_list.size(); i++){
									if(i%2 == 0){
										list.add(result_list[i])
									}
								}
								def host = list.join(",")
								env.host = host
								sh """
									echo ${host}
								"""
								sh '''
										ansible-playbook ansible/hardening.yml \
										                 -i ansible/inventory/${ENV}/redhat/hardening-server-hosts \
																		 -l ${host} | tee -a  hardening-redhat-result-logs-${BUILD_NUMBER}.txt
										grep -A99 "PLAY RECAP" hardening-redhat-result-logs-${BUILD_NUMBER}.txt >> hardening-redhat-result-${BUILD_NUMBER}.txt
								'''
								sh """
                  curl -F 'roomId=${AMK_Room_ID}' -F 'files=@${WORKSPACE}/hardening-redhat-result-${BUILD_NUMBER}.txt' -F 'text=Result Report attached' -H 'Authorization: Bearer OTI0ZGQzYjItZWZmOC00MDFlLWI0NDItZDJjMjY1YzFiNWNhMWJiY2YwNDktOTA3_PF84_e9d367a2-7717-4865-b0b8-3f5b644c2265' --location 'https://webexapis.com/v1/messages'
                """

						}
					}
				}
				stage ("Configure Hardening Solaris"){
					when {
						expression {
							return params.solaris == true;
						}
					}
					steps {
						script {
								def list = []
								def result_list = Server_List_Solaris.tokenize(",")
								for(int i = 0; i< result_list.size(); i++){
									if(i%2 == 0){
										list.add(result_list[i])
									}
								}
								def host = list.join(",")
								env.host = host
								sh """
									echo ${host}
								"""
								sh '''
										ansible-playbook ansible/hardening.yml \
																		 -i ansible/inventory/${ENV}/solaris/hardening-server-hosts \
																		 -l ${host} | tee -a  hardening-solaris-result-logs-${BUILD_NUMBER}.txt
										grep -A99 "PLAY RECAP" hardening-solaris-result-logs-${BUILD_NUMBER}.txt >> hardening-solaris-result-${BUILD_NUMBER}.txt
								'''
								sh """
                  curl -F 'roomId=${AMK_Room_ID}' -F 'files=@${WORKSPACE}/hardening-solaris-result-${BUILD_NUMBER}.txt' -F 'text=Result Report attached' -H 'Authorization: Bearer OTI0ZGQzYjItZWZmOC00MDFlLWI0NDItZDJjMjY1YzFiNWNhMWJiY2YwNDktOTA3_PF84_e9d367a2-7717-4865-b0b8-3f5b644c2265' --location 'https://webexapis.com/v1/messages'
                """
						}
					}
				}
			}
		}
	}
		// post {
		// 		always{
		// 			script{
		// 					sh """
		// 							curl --location 'https://webexapis.com/v1/messages' \
		// 											--header 'Authorization: Bearer ${Webex_Token}' \
		// 											--form 'roomId=${AMK_Room_ID}' \
		// 											--form 'html= <strong>Stage</strong>:  Configure Hardening Server <br>
		// 															<strong>Status</strong>: ${currentBuild.currentResult} <br>
		// 															<strong>Builder</strong>: ${BUILD_USER} '
		// 					"""       
		// 			}
		// 		}
		// }
}
