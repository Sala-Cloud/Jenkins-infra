pipeline {
	agent { label 'master' }
	environment {
		AMK_Infrastructure_Room_ID=credentials('AMK_Infrastructure_Hardening_Room_ID')
		Webex_Token=credentials('Webex_Token')
		Github_Token=credentials('Github_Token')
	}
	stages {
		stage('Parameters'){
			steps {
				script {
					properties([
						parameters([
							[$class: 'ChoiceParameter', 
								choiceType: 'PT_SINGLE_SELECT', 
								description: 'Select the AppFile from the Dropdown List', 
								filterLength: 1, 
								filterable: false, 
								name: 'ENV', 
								script: [
										$class: 'GroovyScript', 
										fallbackScript: [
												classpath: [], 
												sandbox: false, 
												script: 
														"return['Could not get The ENV']"
										], 
										script: [
												classpath: [], 
												sandbox: false, 
												script: 
														"return['uat','pre-prod','prod']"
										]
								]
							],
							
							booleanParam(name: 'ubuntu', defaultValue: false, description: 'Select Ubuntu'),
							[$class: 'CascadeChoiceParameter', 
									choiceType: 'PT_CHECKBOX', 
									description: 'Select the Server List from the Dropdown List',
									filterLength: 1,
									filterable: true, 
									name: 'Server_List_Ubuntu', 
									referencedParameters: 'ENV,ubuntu', 
									script:[
										$class: 'GroovyScript', 
										fallbackScript: [ 
											classpath: [], 
											sandbox: false, 
											script: "return['Could not get Server_List from AppFile Param']"
										],
										script: [ 
											classpath: [], 
											sandbox: false, 
											script: '''
												if (ENV.equals("uat")){
													def hosts = []
													def list = []
													if(ubuntu){
														def appName = "hardening-server"
														def accessToken = "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".bytes.encodeBase64().toString()
														def get = new URL("https://raw.githubusercontent.com/amkbank/ansible-infrastructure/main/ansible/inventory/uat/ubuntu/hardening-server-hosts").openConnection();
														get.setRequestProperty("authorization", "Basic " + accessToken)
														def content = get.getInputStream().getText()
														def startCollect = false
														for(def line : content.split("\\n")) {
																if(line.contains("["+ appName +"]")){ // This is a starting point of host entries
																		startCollect = true
																		continue
																} else if(startCollect) {
																		if(!line.allWhitespace && !line.contains("[")){
																				hosts.add(line.trim())
																		} else {
																				break
																		}
																} 
														}
														for (int i = 0; i < hosts.size(); i++){
															list.add(hosts[i].split(" ")[0,1])
														}
														return list
													}
												}
												else if (ENV.equals("pre-prod")){
													def hosts = []
													def list = []
													if(ubuntu){
														def appName = "hardening-server"
														def accessToken = "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".bytes.encodeBase64().toString()
														def get = new URL("https://raw.githubusercontent.com/amkbank/ansible-infrastructure/main/ansible/inventory/pre-prod/ubuntu/hardening-server-hosts").openConnection();
														get.setRequestProperty("authorization", "Basic " + accessToken)
														def content = get.getInputStream().getText()
														def startCollect = false
														for(def line : content.split("\\n")) {
																if(line.contains("["+ appName +"]")){ // This is a starting point of host entries
																		startCollect = true
																		continue
																} else if(startCollect) {
																		if(!line.allWhitespace && !line.contains("[")){
																				hosts.add(line.trim())
																		} else {
																				break
																		}
																} 
														}
														for (int i = 0; i < hosts.size(); i++){
															list.add(hosts[i].split(" ")[0,1])
														}
														return list
													}
												}
												else if (ENV.equals("prod")){
													def hosts = []
													def list = []
													if(ubuntu){
														def appName = "hardening-server"
														def accessToken = "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".bytes.encodeBase64().toString()
														def get = new URL("https://raw.githubusercontent.com/amkbank/ansible-infrastructure/main/ansible/inventory/production/ubuntu/hardening-server-hosts").openConnection();
														get.setRequestProperty("authorization", "Basic " + accessToken)
														def content = get.getInputStream().getText()
														def startCollect = false
														for(def line : content.split("\\n")) {
																if(line.contains("["+ appName +"]")){ // This is a starting point of host entries
																		startCollect = true
																		continue
																} else if(startCollect) {
																		if(!line.allWhitespace && !line.contains("[")){
																				hosts.add(line.trim())
																		} else {
																				break
																		}
																} 
														}
														for (int i = 0; i < hosts.size(); i++){
															list.add(hosts[i].split(" ")[0,1])
														}
														return list
													}
												}
											'''
										]
									]
							],

							booleanParam(name: 'redhat', defaultValue: false, description: 'Select RedHat'),
							[$class: 'CascadeChoiceParameter', 
									choiceType: 'PT_CHECKBOX', 
									description: 'Select the Server List from the Dropdown List',
									filterLength: 1,
									filterable: true, 
									name: 'Server_List_RedHat', 
									referencedParameters: 'ENV,redhat', 
									script:[
										$class: 'GroovyScript', 
										fallbackScript: [ 
											classpath: [], 
											sandbox: false, 
											script: "return['Could not get Server_List from AppFile Param']"
										],
										script: [ 
											classpath: [], 
											sandbox: false, 
											script: '''
												if (ENV.equals("uat")){
													def hosts = []
													def list = []
													if (redhat){
														def appName = "hardening-server"
														def accessToken = "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".bytes.encodeBase64().toString()
														def get = new URL("https://raw.githubusercontent.com/amkbank/ansible-infrastructure/main/ansible/inventory/uat/redhat/hardening-server-hosts").openConnection();
														get.setRequestProperty("authorization", "Basic " + accessToken)
														def content = get.getInputStream().getText()
														
														def startCollect = false
														for(def line : content.split("\\n")) {
																if(line.contains("["+ appName +"]")){ // This is a starting point of host entries
																		startCollect = true
																		continue
																} else if(startCollect) {
																		if(!line.allWhitespace && !line.contains("[")){
																				hosts.add(line.trim())
																		} else {
																				break
																		}
																} 
														}
														for (int i = 0; i < hosts.size(); i++){
															list.add(hosts[i].split(" ")[0,1])
														}
														return list
													}
												}
												if (ENV.equals("pre-prod")){
													def hosts = []
													def list = []
													if (redhat){
														def appName = "hardening-server"
														def accessToken = "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".bytes.encodeBase64().toString()
														def get = new URL("https://raw.githubusercontent.com/amkbank/ansible-infrastructure/main/ansible/inventory/pre-prod/redhat/hardening-server-hosts").openConnection();
														get.setRequestProperty("authorization", "Basic " + accessToken)
														def content = get.getInputStream().getText()
														
														def startCollect = false
														for(def line : content.split("\\n")) {
																if(line.contains("["+ appName +"]")){ // This is a starting point of host entries
																		startCollect = true
																		continue
																} else if(startCollect) {
																		if(!line.allWhitespace && !line.contains("[")){
																				hosts.add(line.trim())
																		} else {
																				break
																		}
																} 
														}
														for (int i = 0; i < hosts.size(); i++){
															list.add(hosts[i].split(" ")[0,1])
														}
														return list
													}
												}
												if (ENV.equals("prod")){
													def hosts = []
													def list = []
													if (redhat){
														def appName = "hardening-server"
														def accessToken = "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".bytes.encodeBase64().toString()
														def get = new URL("https://raw.githubusercontent.com/amkbank/ansible-infrastructure/main/ansible/inventory/production/redhat/hardening-server-hosts").openConnection();
														get.setRequestProperty("authorization", "Basic " + accessToken)
														def content = get.getInputStream().getText()
														
														def startCollect = false
														for(def line : content.split("\\n")) {
																if(line.contains("["+ appName +"]")){ // This is a starting point of host entries
																		startCollect = true
																		continue
																} else if(startCollect) {
																		if(!line.allWhitespace && !line.contains("[")){
																				hosts.add(line.trim())
																		} else {
																				break
																		}
																} 
														}
														for (int i = 0; i < hosts.size(); i++){
															list.add(hosts[i].split(" ")[0,1])
														}
														return list
													}
												}
											'''
										]
									]
							],

							booleanParam(name: 'solaris', defaultValue: false, description: 'Select Solaris'),
							[$class: 'CascadeChoiceParameter', 
									choiceType: 'PT_CHECKBOX', 
									description: 'Select the Server List from the Dropdown List',
									filterLength: 1,
									filterable: true, 
									name: 'Server_List_Solaris', 
									referencedParameters: 'ENV,solaris', 
									script:[
										$class: 'GroovyScript', 
										fallbackScript: [ 
											classpath: [], 
											sandbox: false, 
											script: "return['Could not get Server_List from AppFile Param']"
										],
										script: [ 
											classpath: [], 
											sandbox: false, 
											script: '''
												if (ENV.equals("uat")){
													def hosts = []
													def list = []
													if (solaris){
														def appName = "hardening-server"
														def accessToken = "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".bytes.encodeBase64().toString()
														def get = new URL("https://raw.githubusercontent.com/amkbank/ansible-infrastructure/main/ansible/inventory/uat/solaris/hardening-server-hosts").openConnection();
														get.setRequestProperty("authorization", "Basic " + accessToken)
														def content = get.getInputStream().getText()
														def startCollect = false
														for(def line : content.split("\\n")) {
																if(line.contains("["+ appName +"]")){ // This is a starting point of host entries
																		startCollect = true
																		continue
																} else if(startCollect) {
																		if(!line.allWhitespace && !line.contains("[")){
																				hosts.add(line.trim())
																		} else {
																				break
																		}
																} 
														}
														for (int i = 0; i < hosts.size(); i++){
															list.add(hosts[i].split(" ")[0,1])
														}
														return list
													}
												}
												else if (ENV.equals("pre-prod")){
													def hosts = []
													def list = []
													if (solaris){
														def appName = "hardening-server"
														def accessToken = "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".bytes.encodeBase64().toString()
														def get = new URL("https://raw.githubusercontent.com/amkbank/ansible-infrastructure/main/ansible/inventory/pre-prod/solaris/hardening-server-hosts").openConnection();
														get.setRequestProperty("authorization", "Basic " + accessToken)
														def content = get.getInputStream().getText()
														def startCollect = false
														for(def line : content.split("\\n")) {
																if(line.contains("["+ appName +"]")){ // This is a starting point of host entries
																		startCollect = true
																		continue
																} else if(startCollect) {
																		if(!line.allWhitespace && !line.contains("[")){
																				hosts.add(line.trim())
																		} else {
																				break
																		}
																} 
														}
														for (int i = 0; i < hosts.size(); i++){
															list.add(hosts[i].split(" ")[0,1])
														}
														return list
													}
												}
												else if (ENV.equals("prod")){
													def hosts = []
													def list = []
													if (solaris){
														def appName = "hardening-server"
														def accessToken = "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".bytes.encodeBase64().toString()
														def get = new URL("https://raw.githubusercontent.com/amkbank/ansible-infrastructure/main/ansible/inventory/production/solaris/hardening-server-hosts").openConnection();
														get.setRequestProperty("authorization", "Basic " + accessToken)
														def content = get.getInputStream().getText()
														def startCollect = false
														for(def line : content.split("\\n")) {
																if(line.contains("["+ appName +"]")){ // This is a starting point of host entries
																		startCollect = true
																		continue
																} else if(startCollect) {
																		if(!line.allWhitespace && !line.contains("[")){
																				hosts.add(line.trim())
																		} else {
																				break
																		}
																} 
														}
														for (int i = 0; i < hosts.size(); i++){
															list.add(hosts[i].split(" ")[0,1])
														}
														return list
													}
												}
											'''
										]
									]
							],

							choice(name: 'os_version',  choices: ['','20','22'], description: 'Pls choose OS version to upgrade for ubuntu only'),
							choice(name: 'action',  choices: ['','all_packages','Install/Update','uninstall'], description: 'Pls choose Action'),
							
							[$class: 'DynamicReferenceParameter',
								choiceType: 'ET_FORMATTED_HTML',
								omitValueField: true,
								description: 'input package name that you want to update, install or uninstall.(Eg. nginx,docker...)' ,
								name: 'package_name',
								referencedParameters: 'action',
								script: [
                                    $class: 'GroovyScript',
                                    fallbackScript: [
										classpath: [],
										sandbox: true,
										script:
												'return[\'nothing.....\']'
                                    ],
                                    script: [
										classpath: [],
										sandbox: true,
										script:
										"""
											if(action.equals('all_packages') || action.equals('')) {
												return ""
											} else {
												return "<input name='value' type='text' value=''>"
											}
										"""
									]
								]
							],

							stashedFile(name: "bash_script"),

							choice(name: 'web_server',  choices: ['--- web-server ---','nginx','apache','tomcat','jboss'], description: 'Pls choose web server'),
							string(name: 'web_server_version', defaultValue: 'stable', description: 'Web Server require selected & input version number that you want to update.'),
							
						])
					])
				}
			}
		}
		stage ('Configure Patching') {
			parallel{
				stage ("Configure Patching Ubuntu"){
					when {
						expression {
							return params.ubuntu == true;
						}
					}
					steps {
						script {
							unstash("bash_script")
							env.host = ""
							if( Server_List_Ubuntu.tokenize(",") )
							{
								def list = []
								def result_list = Server_List_Ubuntu.tokenize(",")
								for(int i = 0; i< result_list.size(); i++){
									if(i%2 == 0){
										list.add(result_list[i])
									}
								}
								def host = list.join(",")
								env.host = host
								sh """
									echo ${host}
								"""
							}
							
							def server = env.host ?: "patching-server"
							sh """
								echo ${server}
							"""
							sh """
								ansible-playbook ansible/patching.yml \
																-i ansible/inventory/${ENV}/ubuntu/patching-server-hosts \
																-l ${server}  \
																-e action=${action} \
																-e package_name=${package_name} \
																-e 'web_server="${web_server}"' \
																-e web_server_version=${web_server_version} \
																-e os_version=${os_version} \
																-e workspace="${WORKSPACE}"  | tee -a patching-ubuntu-result-logs-${BUILD_NUMBER}.txt
														
								grep -A99 "PLAY RECAP" patching-ubuntu-result-logs-${BUILD_NUMBER}.txt >> patching-ubuntu-result-${BUILD_NUMBER}.txt
							"""
							sh """
								curl -F 'roomId=${AMK_Infrastructure_Room_ID}' -F 'files=@${WORKSPACE}/patching-ubuntu-result-logs-${BUILD_NUMBER}.txt' -F 'text=Result Logs Report attached' -H 'Authorization: ${Webex_Token}' --location 'https://webexapis.com/v1/messages'
							"""
							sh """
								if [ ${action} = "Install/Update" ]
								then
									echo "Install/Update package name: ${package_name}" | cat >> ${WORKSPACE}/patching-ubuntu-result-${BUILD_NUMBER}.txt
								elif [ ${action} = "uninstall" ]
								then
									echo "Uninstall package name: ${package_name}" | cat >> ${WORKSPACE}/patching-ubuntu-result-${BUILD_NUMBER}.txt
								fi
								curl -F 'roomId=${AMK_Infrastructure_Room_ID}' -F 'files=@${WORKSPACE}/patching-ubuntu-result-${BUILD_NUMBER}.txt' -F 'text=Result Report attached' -H 'Authorization: ${Webex_Token}' --location 'https://webexapis.com/v1/messages'
							"""
						}
					}
				}
				stage ("Configure Patching Redhat"){
					when {
						expression {
							return params.redhat == true;
						}
					}
					steps {
						script {
							unstash("bash_script")
							env.host = ""
							if( Server_List_RedHat.tokenize(",") )
							{
								def list = []
								def result_list = Server_List_RedHat.tokenize(",")
								for(int i = 0; i< result_list.size(); i++){
									if(i%2 == 0){
										list.add(result_list[i])
									}
								}
								def host = list.join(",")
								env.host = host
								sh """
									echo ${host}
								"""
							}
							
							def server = env.host ?: "patching-server"
							sh """
								echo ${server}
							"""
							sh """
								ansible-playbook ansible/patching.yml \
																	-i ansible/inventory/${ENV}/redhat/patching-server-hosts \
																	-l ${server}  \
																	-e action=${action} \
																	-e package_name=${package_name} \
																	-e 'web_server="${web_server}"' \
																	-e web_server_version=${web_server_version} \
																	-e os_version=${os_version} \
																	-e workspace="${WORKSPACE}" | tee -a patching-redhat-result-logs-${BUILD_NUMBER}.txt
														
								grep -A99 "PLAY RECAP" patching-redhat-result-logs-${BUILD_NUMBER}.txt >> patching-redhat-result-${BUILD_NUMBER}.txt
							"""
							sh """
								curl -F 'roomId=${AMK_Infrastructure_Room_ID}' -F 'files=@${WORKSPACE}/patching-redhat-result-logs-${BUILD_NUMBER}.txt' -F 'text=Result Logs Report attached' -H 'Authorization: ${Webex_Token}' --location 'https://webexapis.com/v1/messages'
							"""
							sh """
								if [ ${action} = "Install/Update" ]
								then
									echo "Install/Update package name: ${package_name}" | cat >> ${WORKSPACE}/patching-redhat-result-${BUILD_NUMBER}.txt
								elif [ ${action} = "uninstall" ]
								then
									echo "Uninstall package name: ${package_name}" | cat >> ${WORKSPACE}/patching-redhat-result-${BUILD_NUMBER}.txt
								fi
								curl -F 'roomId=${AMK_Infrastructure_Room_ID}' -F 'files=@${WORKSPACE}/patching-redhat-result-${BUILD_NUMBER}.txt' -F 'text=Result Report attached' -H 'Authorization: ${Webex_Token}' --location 'https://webexapis.com/v1/messages'
							"""
						}
					}
				}
				stage ("Configure Patching Solaris"){
					when {
						expression {
							return params.solaris == true;
						}
					}
					steps {
						script {
							unstash("bash_script")
							env.host = ""
							if( Server_List_Solaris.tokenize(",") )
							{
								def list = []
								def result_list = Server_List_Solaris.tokenize(",")
								for(int i = 0; i< result_list.size(); i++){
									if(i%2 == 0){
										list.add(result_list[i])
									}
								}
								def host = list.join(",")
								env.host = host
								sh """
									echo ${host}
								"""
							}
							
							def server = env.host ?: "patching-server"
							sh """
								echo ${server}
							"""
							sh """
								ansible-playbook ansible/patching.yml \
																	-i ansible/inventory/${ENV}/solaris/patching-server-hosts \
																	-l ${server}  \
																	-e action=${action} \
																	-e package_name=${package_name} \
																	-e 'web_server="${web_server}"' \
																	-e web_server_version=${web_server_version} \
																	-e os_version=${os_version} \
																	-e workspace="${WORKSPACE}" | tee -a  patching-solaris-result-logs-${BUILD_NUMBER}.txt
														
								grep -A99 "PLAY RECAP" patching-solaris-result-logs-${BUILD_NUMBER}.txt >> patching-solaris-result-${BUILD_NUMBER}.txt
							"""
							sh """
								curl -F 'roomId=${AMK_Infrastructure_Room_ID}' -F 'files=@${WORKSPACE}/patching-solaris-result-logs-${BUILD_NUMBER}.txt' -F 'text=Result Logs Report attached' -H 'Authorization: ${Webex_Token}' --location 'https://webexapis.com/v1/messages'
							"""
							sh """
								if [ ${action} = "Install/Update" ]
								then
									echo "Install/Update package name: ${package_name}" | cat >> ${WORKSPACE}/patching-solaris-result-${BUILD_NUMBER}.txt
								elif [ ${action} = "uninstall" ]
								then
									echo "Uninstall package name: ${package_name}" | cat >> ${WORKSPACE}/patching-solaris-result-${BUILD_NUMBER}.txt
								fi
								curl -F 'roomId=${AMK_Infrastructure_Room_ID}' -F 'files=@${WORKSPACE}/patching-solaris-result-${BUILD_NUMBER}.txt' -F 'text=Result Report attached' -H 'Authorization: ${Webex_Token}' --location 'https://webexapis.com/v1/messages'
							"""
						}
					}
				}
			}
		}
		stage ('Approval Bash File'){
			when {
				expression {
					return check_exist_file();
				}
			}
			parallel{
				stage ("Apply Bash Script Ubuntu"){
					when {
						expression {
							return params.ubuntu == true;
						}
					}
					steps {
						script {
							env.host = ""
							if( Server_List_Ubuntu.tokenize(",") )
							{
								def list = []
								def result_list = Server_List_Ubuntu.tokenize(",")
								for(int i = 0; i< result_list.size(); i++){
									if(i%2 == 0){
										list.add(result_list[i])
									}
								}
								def host = list.join(",")
								env.host = host
								sh """
									echo ${host}
								"""
							}
							def server = env.host ?: "patching-server"
							sh """
								echo ${server}
							"""
							sh """#!/bin/sh -l
								ls
								curl --location 'https://webexapis.com/v1/messages' \
											--header 'Authorization: $Webex_Token' \
											--form 'roomId=${AMK_Infrastructure_Room_ID}' \
											--form 'text=Dear Bong please help approve proceed upload Bash Script on environment ${ENV}  : https://ci-uat.amkcambodia.com/job/Approval/job/Bash-File-Approval/' \
											-F 'files=@${WORKSPACE}/bash_script'
							"""
							def approval_result = build(job: 'Approval/Bash-File-Approval',
								propagate: false,
								parameters: [
									booleanParam(name: 'BashFile', value: true)
								]
							)
							sh """
								echo ${approval_result.getResult()}
							"""
							if (approval_result.getResult() == "SUCCESS") {
								sh """
									ansible-playbook ansible/patching_bash_script.yml \
													-i ansible/inventory/${ENV}/ubuntu/patching-server-hosts \
													-l ${server}  \
													-e workspace="${WORKSPACE}" \
													-e upload_file="bash_script"
								"""
							}
						}
					}
				}
				stage ("Apply Bash Script Redhat"){
					when {
						expression {
							return params.redhat == true;
						}
					}
					steps {
						script {
							env.host = ""
							if( Server_List_RedHat.tokenize(",") )
							{
								def list = []
								def result_list = Server_List_RedHat.tokenize(",")
								for(int i = 0; i< result_list.size(); i++){
									if(i%2 == 0){
										list.add(result_list[i])
									}
								}
								def host = list.join(",")
								env.host = host
								sh """
									echo ${host}
								"""
							}
							
							def server = env.host ?: "patching-server"
							sh """
								echo ${server}
							"""
							sh """#!/bin/sh -l
								curl --location 'https://webexapis.com/v1/messages' \
											--header 'Authorization: $Webex_Token' \
											--form 'roomId=${AMK_Infrastructure_Room_ID}' \
											--form 'text=Dear Bong please help approve proceed upload Bash Script on environment ${ENV}  : https://ci-uat.amkcambodia.com/job/Approval/job/Bash-File-Approval/' \
											-F 'files=@${WORKSPACE}/bash_script'
							"""
							def approval_result = build(job: 'Approval/Bash-File-Approval',
								propagate: false,
								parameters: [
									booleanParam(name: 'BashFile', value: true)
								]
							)
							if (approval_result.getResult() == "SUCCESS") {
								sh """
								ansible-playbook ansible/patching_bash_script.yml \
												-i ansible/inventory/${ENV}/redhat/patching-server-hosts \
												-l ${server}  \
												-e workspace="${WORKSPACE}" \
												-e upload_file="bash_script" """
							}
						}
					}
				}
				stage ("Apply Bash Script Solaris"){
					when {
						expression {
							return params.solaris == true;
						}
					}
					steps {
						script {
							env.host = ""
							if( Server_List_Solaris.tokenize(",") )
							{
								def list = []
								def result_list = Server_List_Solaris.tokenize(",")
								for(int i = 0; i< result_list.size(); i++){
									if(i%2 == 0){
										list.add(result_list[i])
									}
								}
								def host = list.join(",")
								env.host = host
								sh """
									echo ${host}
								"""
							}
							
							def server = env.host ?: "patching-server"
							sh """
								echo ${server}
							"""
							sh """#!/bin/sh -l
								curl --location 'https://webexapis.com/v1/messages' \
											--header 'Authorization: $Webex_Token' \
											--form 'roomId=${AMK_Infrastructure_Room_ID}' \
											--form 'text=Dear Bong please help approve proceed upload Bash Script on environment ${ENV}  : https://ci-uat.amkcambodia.com/job/Approval/job/Bash-File-Approval/' \
											-F 'files=@${WORKSPACE}/bash_script'
							"""
							def approval_result = build(job: 'Approval/Bash-File-Approval',
								propagate: false,
								parameters: [
									booleanParam(name: 'BashFile', value: true)
								]
							)
							if (approval_result.getResult() == "SUCCESS") {
								sh """
									ansible-playbook ansible/patching_bash_script.yml \
												-i ansible/inventory/${ENV}/solaris/patching-server-hosts \
												-l ${server}  \
												-e workspace="${WORKSPACE}" \
												-e upload_file="bash_script" """
							}
						}
					}
				}
			}
		}
		stage ('Clean Workspace'){
			steps {
				cleanWs()
			}
		}
	}
}

def check_exist_file(){
	def bash_script = readFile("bash_script")
    if(bash_script.size() == 0) {
        return false
    } else {
        return true;
    }
}